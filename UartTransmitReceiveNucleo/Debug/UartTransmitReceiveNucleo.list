
UartTransmitReceiveNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800154c  0800154c  0001154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001594  08001594  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001594  08001594  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001594  08001594  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001594  08001594  00011594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001598  08001598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800159c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000060  080015fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080015fc  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001040  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000569  00000000  00000000  00021113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00021680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f1  00000000  00000000  000217e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f961  00000000  00000000  000218d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cc0  00000000  00000000  00031232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000553d0  00000000  00000000  00032ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bec  00000000  00000000  000882c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00088eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001534 	.word	0x08001534

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001534 	.word	0x08001534

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

/* Global variables */
uint8_t counter = 0;
uint8_t key = 254;

int main(void){
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

	/* All GPIOS connected to AHB1 */
	/* Enabling clock for peripherals connected to bus AHB1 */
	/* Enable clock for GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 8000284:	4b34      	ldr	r3, [pc, #208]	; (8000358 <main+0xd8>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a33      	ldr	r2, [pc, #204]	; (8000358 <main+0xd8>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
	/* Enable clock for GPIOA */
	RCC->AHB1ENR |= GPIOCEN;
 8000290:	4b31      	ldr	r3, [pc, #196]	; (8000358 <main+0xd8>)
 8000292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000294:	4a30      	ldr	r2, [pc, #192]	; (8000358 <main+0xd8>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set direction of PA5/Green User Led to out */
	GPIOA->MODER |= (1<<10);
 800029c:	4b2f      	ldr	r3, [pc, #188]	; (800035c <main+0xdc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2e      	ldr	r2, [pc, #184]	; (800035c <main+0xdc>)
 80002a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<11);
 80002a8:	4b2c      	ldr	r3, [pc, #176]	; (800035c <main+0xdc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2b      	ldr	r2, [pc, #172]	; (800035c <main+0xdc>)
 80002ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002b2:	6013      	str	r3, [r2, #0]
	/* Set direction of PC13/User Push Button to In */
	GPIOC->MODER &= ~(1<<26);
 80002b4:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <main+0xe0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a29      	ldr	r2, [pc, #164]	; (8000360 <main+0xe0>)
 80002ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1<<27);
 80002c0:	4b27      	ldr	r3, [pc, #156]	; (8000360 <main+0xe0>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a26      	ldr	r2, [pc, #152]	; (8000360 <main+0xe0>)
 80002c6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002ca:	6013      	str	r3, [r2, #0]

	/* Initialize USART2 */
	Uart2_Rxtx_Init();
 80002cc:	f000 f8f6 	bl	80004bc <Uart2_Rxtx_Init>

	while(1){

        key = Uart_Read();
 80002d0:	f000 f976 	bl	80005c0 <Uart_Read>
 80002d4:	4603      	mov	r3, r0
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	4b22      	ldr	r3, [pc, #136]	; (8000364 <main+0xe4>)
 80002da:	701a      	strb	r2, [r3, #0]
        /* Transmit mode on only once '1' is pressed from terminal */
		if(key == '1'){
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <main+0xe4>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b31      	cmp	r3, #49	; 0x31
 80002e2:	d123      	bne.n	800032c <main+0xac>
			/*Check if PC13 is pressed*/
			if(!(GPIOC->IDR & USR_PUSH_BUTTON)){
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <main+0xe0>)
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d116      	bne.n	800031e <main+0x9e>
			  GPIOA->ODR ^= GREEN_LED;
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <main+0xdc>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <main+0xdc>)
 80002f6:	f083 0320 	eor.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]
			  Delay(10000);
 80002fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000300:	f000 f995 	bl	800062e <Delay>
			  counter++;
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <main+0xe8>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	b2da      	uxtb	r2, r3
 800030c:	4b16      	ldr	r3, [pc, #88]	; (8000368 <main+0xe8>)
 800030e:	701a      	strb	r2, [r3, #0]
			  printf("\n Current count : %d",counter);
 8000310:	4b15      	ldr	r3, [pc, #84]	; (8000368 <main+0xe8>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	4619      	mov	r1, r3
 8000316:	4815      	ldr	r0, [pc, #84]	; (800036c <main+0xec>)
 8000318:	f000 fa96 	bl	8000848 <iprintf>
 800031c:	e7d8      	b.n	80002d0 <main+0x50>

		    }
			else{
			  GPIOA->ODR &= ~GREEN_LED;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <main+0xdc>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <main+0xdc>)
 8000324:	f023 0320 	bic.w	r3, r3, #32
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	e7d1      	b.n	80002d0 <main+0x50>
			}
		}
		/* Receiver mode is on once user presses '0' from terminal */
		else if(key == '0'){
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <main+0xe4>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b30      	cmp	r3, #48	; 0x30
 8000332:	d109      	bne.n	8000348 <main+0xc8>
			 /* Toggle Grren LED */
			 GPIOA->ODR ^= GREEN_LED;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <main+0xdc>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a08      	ldr	r2, [pc, #32]	; (800035c <main+0xdc>)
 800033a:	f083 0320 	eor.w	r3, r3, #32
 800033e:	6153      	str	r3, [r2, #20]
			 Delay(1000000);
 8000340:	480b      	ldr	r0, [pc, #44]	; (8000370 <main+0xf0>)
 8000342:	f000 f974 	bl	800062e <Delay>
 8000346:	e7c3      	b.n	80002d0 <main+0x50>
		}
		else{
			/* Led turns off once user enters any other key from terminal */
			GPIOA->ODR &= ~GREEN_LED;
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <main+0xdc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a03      	ldr	r2, [pc, #12]	; (800035c <main+0xdc>)
 800034e:	f023 0320 	bic.w	r3, r3, #32
 8000352:	6153      	str	r3, [r2, #20]
        key = Uart_Read();
 8000354:	e7bc      	b.n	80002d0 <main+0x50>
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	40020800 	.word	0x40020800
 8000364:	20000000 	.word	0x20000000
 8000368:	2000007c 	.word	0x2000007c
 800036c:	0800154c 	.word	0x0800154c
 8000370:	000f4240 	.word	0x000f4240

08000374 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60f8      	str	r0, [r7, #12]
 800037c:	60b9      	str	r1, [r7, #8]
 800037e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
 8000384:	e00a      	b.n	800039c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000386:	f3af 8000 	nop.w
 800038a:	4601      	mov	r1, r0
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	1c5a      	adds	r2, r3, #1
 8000390:	60ba      	str	r2, [r7, #8]
 8000392:	b2ca      	uxtb	r2, r1
 8000394:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	3301      	adds	r3, #1
 800039a:	617b      	str	r3, [r7, #20]
 800039c:	697a      	ldr	r2, [r7, #20]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	429a      	cmp	r2, r3
 80003a2:	dbf0      	blt.n	8000386 <_read+0x12>
  }

  return len;
 80003a4:	687b      	ldr	r3, [r7, #4]
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	b086      	sub	sp, #24
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	60b9      	str	r1, [r7, #8]
 80003b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
 80003be:	e009      	b.n	80003d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	1c5a      	adds	r2, r3, #1
 80003c4:	60ba      	str	r2, [r7, #8]
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f000 f945 	bl	8000658 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	3301      	adds	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	429a      	cmp	r2, r3
 80003da:	dbf1      	blt.n	80003c0 <_write+0x12>
  }
  return len;
 80003dc:	687b      	ldr	r3, [r7, #4]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_close>:

int _close(int file)
{
 80003e6:	b480      	push	{r7}
 80003e8:	b083      	sub	sp, #12
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800040e:	605a      	str	r2, [r3, #4]
  return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	4618      	mov	r0, r3
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <_isatty>:

int _isatty(int file)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000426:	2301      	movs	r3, #1
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
	...

08000450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <_sbrk+0x5c>)
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <_sbrk+0x60>)
 800045c:	1ad3      	subs	r3, r2, r3
 800045e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d102      	bne.n	8000472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <_sbrk+0x64>)
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <_sbrk+0x68>)
 8000470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000472:	4b10      	ldr	r3, [pc, #64]	; (80004b4 <_sbrk+0x64>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4413      	add	r3, r2
 800047a:	693a      	ldr	r2, [r7, #16]
 800047c:	429a      	cmp	r2, r3
 800047e:	d207      	bcs.n	8000490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000480:	f000 fa86 	bl	8000990 <__errno>
 8000484:	4603      	mov	r3, r0
 8000486:	220c      	movs	r2, #12
 8000488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
 800048e:	e009      	b.n	80004a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <_sbrk+0x64>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4413      	add	r3, r2
 800049e:	4a05      	ldr	r2, [pc, #20]	; (80004b4 <_sbrk+0x64>)
 80004a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a2:	68fb      	ldr	r3, [r7, #12]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20018000 	.word	0x20018000
 80004b0:	00000400 	.word	0x00000400
 80004b4:	20000080 	.word	0x20000080
 80004b8:	200001d0 	.word	0x200001d0

080004bc <Uart2_Rxtx_Init>:
#include "uart.h"

void Uart2_Rxtx_Init(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

	/* Set direction of PA2/USART2_TX to Alternate function */
	GPIOA->MODER |= (1<<5);
 80004c0:	4b2f      	ldr	r3, [pc, #188]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a2e      	ldr	r2, [pc, #184]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<4);
 80004cc:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a2b      	ldr	r2, [pc, #172]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004d2:	f023 0310 	bic.w	r3, r3, #16
 80004d6:	6013      	str	r3, [r2, #0]
	/* Set direction of PA3/USART2_RX to Alternate function */
	GPIOA->MODER |= (1<<7);
 80004d8:	4b29      	ldr	r3, [pc, #164]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a28      	ldr	r2, [pc, #160]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<6);
 80004e4:	4b26      	ldr	r3, [pc, #152]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a25      	ldr	r2, [pc, #148]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ee:	6013      	str	r3, [r2, #0]
	/* Set alternate function of PA2 to USART2 */
	GPIOA->AFR[0] |= (1<<8);
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a22      	ldr	r2, [pc, #136]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 80004fc:	4b20      	ldr	r3, [pc, #128]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a1f      	ldr	r2, [pc, #124]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a1c      	ldr	r2, [pc, #112]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800050e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000512:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a19      	ldr	r2, [pc, #100]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800051a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800051e:	6213      	str	r3, [r2, #32]

	/* Set alternate function of PA3 to USART2 */
	GPIOA->AFR[0] |= (1<<12);
 8000520:	4b17      	ldr	r3, [pc, #92]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 8000522:	6a1b      	ldr	r3, [r3, #32]
 8000524:	4a16      	ldr	r2, [pc, #88]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 8000526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<13);
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800052e:	6a1b      	ldr	r3, [r3, #32]
 8000530:	4a13      	ldr	r2, [pc, #76]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 8000532:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000536:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<14);
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <Uart2_Rxtx_Init+0xc4>)
 800054a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800054e:	6213      	str	r3, [r2, #32]

	/* USART2 is connected to APB1 */
	/* Enabling clock for peripherals connected to bus APB1 */
	/* Enable clock for USART2 */
	RCC->APB1ENR |= USART2EN;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <Uart2_Rxtx_Init+0xc8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <Uart2_Rxtx_Init+0xc8>)
 8000556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40

	/* Set Baud Rate for USART2 */
	Set_Uart_Baudrate(USART2,APB1_CLK,USART_BAUDRATE);
 800055c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000560:	4909      	ldr	r1, [pc, #36]	; (8000588 <Uart2_Rxtx_Init+0xcc>)
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <Uart2_Rxtx_Init+0xd0>)
 8000564:	f000 f83e 	bl	80005e4 <Set_Uart_Baudrate>
	/* Configure Transfer  of USART2 PA2 and PA3 direction as Tx and Rx both */
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <Uart2_Rxtx_Init+0xd0>)
 800056a:	220c      	movs	r2, #12
 800056c:	60da      	str	r2, [r3, #12]
	/*Enable USART2*/
	USART2->CR1 |= CR1_EN;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <Uart2_Rxtx_Init+0xd0>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4a06      	ldr	r2, [pc, #24]	; (800058c <Uart2_Rxtx_Init+0xd0>)
 8000574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000578:	60d3      	str	r3, [r2, #12]

}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020000 	.word	0x40020000
 8000584:	40023800 	.word	0x40023800
 8000588:	00f42400 	.word	0x00f42400
 800058c:	40004400 	.word	0x40004400

08000590 <Uart_Write>:

void Uart_Write(int ch){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]

	/*Make sure Transmit Data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000598:	bf00      	nop
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <Uart_Write+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <Uart_Write+0xa>
	/*Transmit data*/
	USART2->DR = (ch & 0xFF);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <Uart_Write+0x2c>)
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	6053      	str	r3, [r2, #4]

}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40004400 	.word	0x40004400

080005c0 <Uart_Read>:

int Uart_Read(void){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

	/* Wait till there is nothing to receive */
	while(!(USART2->SR & SR_RXNE)){}
 80005c4:	bf00      	nop
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <Uart_Read+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <Uart_Read+0x6>
	/* Return the read value from console */
	return USART2->DR;
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <Uart_Read+0x20>)
 80005d4:	685b      	ldr	r3, [r3, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40004400 	.word	0x40004400

080005e4 <Set_Uart_Baudrate>:

void Set_Uart_Baudrate(USART_TypeDef *USARTx,uint32_t periph_clk, uint32_t baudrate){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]

	USARTx->BRR = Compute_Uart_Baudrate(periph_clk,baudrate);
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	68b8      	ldr	r0, [r7, #8]
 80005f4:	f000 f808 	bl	8000608 <Compute_Uart_Baudrate>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	609a      	str	r2, [r3, #8]
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Compute_Uart_Baudrate>:

uint16_t Compute_Uart_Baudrate(uint32_t periph_clk, uint32_t baudrate){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]

	return ((periph_clk + (baudrate/2))/baudrate);
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	085a      	lsrs	r2, r3, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	441a      	add	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	b29b      	uxth	r3, r3
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <Delay>:

void Delay(unsigned long ticks){
 800062e:	b480      	push	{r7}
 8000630:	b085      	sub	sp, #20
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]

	for(unsigned long i=0;i<ticks;i++);
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e002      	b.n	8000642 <Delay+0x14>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	429a      	cmp	r2, r3
 8000648:	d3f8      	bcc.n	800063c <Delay+0xe>
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <__io_putchar>:

int __io_putchar(int ch){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

	Uart_Write(ch);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff95 	bl	8000590 <Uart_Write>
	return ch;
 8000666:	687b      	ldr	r3, [r7, #4]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000672:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000674:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069e:	f000 f97d 	bl	800099c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a2:	f7ff fded 	bl	8000280 <main>

080006a6 <LoopForever>:

LoopForever:
  b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   r0, =_estack
 80006a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006b4:	0800159c 	.word	0x0800159c
  ldr r2, =_sbss
 80006b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006bc:	200001d0 	.word	0x200001d0

080006c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC_IRQHandler>
	...

080006c4 <std>:
 80006c4:	2300      	movs	r3, #0
 80006c6:	b510      	push	{r4, lr}
 80006c8:	4604      	mov	r4, r0
 80006ca:	e9c0 3300 	strd	r3, r3, [r0]
 80006ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006d2:	6083      	str	r3, [r0, #8]
 80006d4:	8181      	strh	r1, [r0, #12]
 80006d6:	6643      	str	r3, [r0, #100]	; 0x64
 80006d8:	81c2      	strh	r2, [r0, #14]
 80006da:	6183      	str	r3, [r0, #24]
 80006dc:	4619      	mov	r1, r3
 80006de:	2208      	movs	r2, #8
 80006e0:	305c      	adds	r0, #92	; 0x5c
 80006e2:	f000 f906 	bl	80008f2 <memset>
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <std+0x58>)
 80006e8:	6263      	str	r3, [r4, #36]	; 0x24
 80006ea:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <std+0x5c>)
 80006ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <std+0x60>)
 80006f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <std+0x64>)
 80006f4:	6323      	str	r3, [r4, #48]	; 0x30
 80006f6:	4b0d      	ldr	r3, [pc, #52]	; (800072c <std+0x68>)
 80006f8:	6224      	str	r4, [r4, #32]
 80006fa:	429c      	cmp	r4, r3
 80006fc:	d006      	beq.n	800070c <std+0x48>
 80006fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000702:	4294      	cmp	r4, r2
 8000704:	d002      	beq.n	800070c <std+0x48>
 8000706:	33d0      	adds	r3, #208	; 0xd0
 8000708:	429c      	cmp	r4, r3
 800070a:	d105      	bne.n	8000718 <std+0x54>
 800070c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000714:	f000 b966 	b.w	80009e4 <__retarget_lock_init_recursive>
 8000718:	bd10      	pop	{r4, pc}
 800071a:	bf00      	nop
 800071c:	0800086d 	.word	0x0800086d
 8000720:	0800088f 	.word	0x0800088f
 8000724:	080008c7 	.word	0x080008c7
 8000728:	080008eb 	.word	0x080008eb
 800072c:	20000084 	.word	0x20000084

08000730 <stdio_exit_handler>:
 8000730:	4a02      	ldr	r2, [pc, #8]	; (800073c <stdio_exit_handler+0xc>)
 8000732:	4903      	ldr	r1, [pc, #12]	; (8000740 <stdio_exit_handler+0x10>)
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <stdio_exit_handler+0x14>)
 8000736:	f000 b869 	b.w	800080c <_fwalk_sglue>
 800073a:	bf00      	nop
 800073c:	20000004 	.word	0x20000004
 8000740:	08001291 	.word	0x08001291
 8000744:	20000010 	.word	0x20000010

08000748 <cleanup_stdio>:
 8000748:	6841      	ldr	r1, [r0, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <cleanup_stdio+0x34>)
 800074c:	4299      	cmp	r1, r3
 800074e:	b510      	push	{r4, lr}
 8000750:	4604      	mov	r4, r0
 8000752:	d001      	beq.n	8000758 <cleanup_stdio+0x10>
 8000754:	f000 fd9c 	bl	8001290 <_fflush_r>
 8000758:	68a1      	ldr	r1, [r4, #8]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <cleanup_stdio+0x38>)
 800075c:	4299      	cmp	r1, r3
 800075e:	d002      	beq.n	8000766 <cleanup_stdio+0x1e>
 8000760:	4620      	mov	r0, r4
 8000762:	f000 fd95 	bl	8001290 <_fflush_r>
 8000766:	68e1      	ldr	r1, [r4, #12]
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <cleanup_stdio+0x3c>)
 800076a:	4299      	cmp	r1, r3
 800076c:	d004      	beq.n	8000778 <cleanup_stdio+0x30>
 800076e:	4620      	mov	r0, r4
 8000770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000774:	f000 bd8c 	b.w	8001290 <_fflush_r>
 8000778:	bd10      	pop	{r4, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084
 8000780:	200000ec 	.word	0x200000ec
 8000784:	20000154 	.word	0x20000154

08000788 <global_stdio_init.part.0>:
 8000788:	b510      	push	{r4, lr}
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <global_stdio_init.part.0+0x30>)
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <global_stdio_init.part.0+0x34>)
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <global_stdio_init.part.0+0x38>)
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	4620      	mov	r0, r4
 8000794:	2200      	movs	r2, #0
 8000796:	2104      	movs	r1, #4
 8000798:	f7ff ff94 	bl	80006c4 <std>
 800079c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007a0:	2201      	movs	r2, #1
 80007a2:	2109      	movs	r1, #9
 80007a4:	f7ff ff8e 	bl	80006c4 <std>
 80007a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007ac:	2202      	movs	r2, #2
 80007ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b2:	2112      	movs	r1, #18
 80007b4:	f7ff bf86 	b.w	80006c4 <std>
 80007b8:	200001bc 	.word	0x200001bc
 80007bc:	20000084 	.word	0x20000084
 80007c0:	08000731 	.word	0x08000731

080007c4 <__sfp_lock_acquire>:
 80007c4:	4801      	ldr	r0, [pc, #4]	; (80007cc <__sfp_lock_acquire+0x8>)
 80007c6:	f000 b90e 	b.w	80009e6 <__retarget_lock_acquire_recursive>
 80007ca:	bf00      	nop
 80007cc:	200001c5 	.word	0x200001c5

080007d0 <__sfp_lock_release>:
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <__sfp_lock_release+0x8>)
 80007d2:	f000 b909 	b.w	80009e8 <__retarget_lock_release_recursive>
 80007d6:	bf00      	nop
 80007d8:	200001c5 	.word	0x200001c5

080007dc <__sinit>:
 80007dc:	b510      	push	{r4, lr}
 80007de:	4604      	mov	r4, r0
 80007e0:	f7ff fff0 	bl	80007c4 <__sfp_lock_acquire>
 80007e4:	6a23      	ldr	r3, [r4, #32]
 80007e6:	b11b      	cbz	r3, 80007f0 <__sinit+0x14>
 80007e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ec:	f7ff bff0 	b.w	80007d0 <__sfp_lock_release>
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__sinit+0x28>)
 80007f2:	6223      	str	r3, [r4, #32]
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__sinit+0x2c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f5      	bne.n	80007e8 <__sinit+0xc>
 80007fc:	f7ff ffc4 	bl	8000788 <global_stdio_init.part.0>
 8000800:	e7f2      	b.n	80007e8 <__sinit+0xc>
 8000802:	bf00      	nop
 8000804:	08000749 	.word	0x08000749
 8000808:	200001bc 	.word	0x200001bc

0800080c <_fwalk_sglue>:
 800080c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000810:	4607      	mov	r7, r0
 8000812:	4688      	mov	r8, r1
 8000814:	4614      	mov	r4, r2
 8000816:	2600      	movs	r6, #0
 8000818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800081c:	f1b9 0901 	subs.w	r9, r9, #1
 8000820:	d505      	bpl.n	800082e <_fwalk_sglue+0x22>
 8000822:	6824      	ldr	r4, [r4, #0]
 8000824:	2c00      	cmp	r4, #0
 8000826:	d1f7      	bne.n	8000818 <_fwalk_sglue+0xc>
 8000828:	4630      	mov	r0, r6
 800082a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800082e:	89ab      	ldrh	r3, [r5, #12]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d907      	bls.n	8000844 <_fwalk_sglue+0x38>
 8000834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000838:	3301      	adds	r3, #1
 800083a:	d003      	beq.n	8000844 <_fwalk_sglue+0x38>
 800083c:	4629      	mov	r1, r5
 800083e:	4638      	mov	r0, r7
 8000840:	47c0      	blx	r8
 8000842:	4306      	orrs	r6, r0
 8000844:	3568      	adds	r5, #104	; 0x68
 8000846:	e7e9      	b.n	800081c <_fwalk_sglue+0x10>

08000848 <iprintf>:
 8000848:	b40f      	push	{r0, r1, r2, r3}
 800084a:	b507      	push	{r0, r1, r2, lr}
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <iprintf+0x20>)
 800084e:	ab04      	add	r3, sp, #16
 8000850:	6808      	ldr	r0, [r1, #0]
 8000852:	f853 2b04 	ldr.w	r2, [r3], #4
 8000856:	6881      	ldr	r1, [r0, #8]
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	f000 f9e9 	bl	8000c30 <_vfiprintf_r>
 800085e:	b003      	add	sp, #12
 8000860:	f85d eb04 	ldr.w	lr, [sp], #4
 8000864:	b004      	add	sp, #16
 8000866:	4770      	bx	lr
 8000868:	2000005c 	.word	0x2000005c

0800086c <__sread>:
 800086c:	b510      	push	{r4, lr}
 800086e:	460c      	mov	r4, r1
 8000870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000874:	f000 f868 	bl	8000948 <_read_r>
 8000878:	2800      	cmp	r0, #0
 800087a:	bfab      	itete	ge
 800087c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800087e:	89a3      	ldrhlt	r3, [r4, #12]
 8000880:	181b      	addge	r3, r3, r0
 8000882:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000886:	bfac      	ite	ge
 8000888:	6563      	strge	r3, [r4, #84]	; 0x54
 800088a:	81a3      	strhlt	r3, [r4, #12]
 800088c:	bd10      	pop	{r4, pc}

0800088e <__swrite>:
 800088e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000892:	461f      	mov	r7, r3
 8000894:	898b      	ldrh	r3, [r1, #12]
 8000896:	05db      	lsls	r3, r3, #23
 8000898:	4605      	mov	r5, r0
 800089a:	460c      	mov	r4, r1
 800089c:	4616      	mov	r6, r2
 800089e:	d505      	bpl.n	80008ac <__swrite+0x1e>
 80008a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a4:	2302      	movs	r3, #2
 80008a6:	2200      	movs	r2, #0
 80008a8:	f000 f83c 	bl	8000924 <_lseek_r>
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008b6:	81a3      	strh	r3, [r4, #12]
 80008b8:	4632      	mov	r2, r6
 80008ba:	463b      	mov	r3, r7
 80008bc:	4628      	mov	r0, r5
 80008be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008c2:	f000 b853 	b.w	800096c <_write_r>

080008c6 <__sseek>:
 80008c6:	b510      	push	{r4, lr}
 80008c8:	460c      	mov	r4, r1
 80008ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ce:	f000 f829 	bl	8000924 <_lseek_r>
 80008d2:	1c43      	adds	r3, r0, #1
 80008d4:	89a3      	ldrh	r3, [r4, #12]
 80008d6:	bf15      	itete	ne
 80008d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80008da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80008de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80008e2:	81a3      	strheq	r3, [r4, #12]
 80008e4:	bf18      	it	ne
 80008e6:	81a3      	strhne	r3, [r4, #12]
 80008e8:	bd10      	pop	{r4, pc}

080008ea <__sclose>:
 80008ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ee:	f000 b809 	b.w	8000904 <_close_r>

080008f2 <memset>:
 80008f2:	4402      	add	r2, r0
 80008f4:	4603      	mov	r3, r0
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d100      	bne.n	80008fc <memset+0xa>
 80008fa:	4770      	bx	lr
 80008fc:	f803 1b01 	strb.w	r1, [r3], #1
 8000900:	e7f9      	b.n	80008f6 <memset+0x4>
	...

08000904 <_close_r>:
 8000904:	b538      	push	{r3, r4, r5, lr}
 8000906:	4d06      	ldr	r5, [pc, #24]	; (8000920 <_close_r+0x1c>)
 8000908:	2300      	movs	r3, #0
 800090a:	4604      	mov	r4, r0
 800090c:	4608      	mov	r0, r1
 800090e:	602b      	str	r3, [r5, #0]
 8000910:	f7ff fd69 	bl	80003e6 <_close>
 8000914:	1c43      	adds	r3, r0, #1
 8000916:	d102      	bne.n	800091e <_close_r+0x1a>
 8000918:	682b      	ldr	r3, [r5, #0]
 800091a:	b103      	cbz	r3, 800091e <_close_r+0x1a>
 800091c:	6023      	str	r3, [r4, #0]
 800091e:	bd38      	pop	{r3, r4, r5, pc}
 8000920:	200001c0 	.word	0x200001c0

08000924 <_lseek_r>:
 8000924:	b538      	push	{r3, r4, r5, lr}
 8000926:	4d07      	ldr	r5, [pc, #28]	; (8000944 <_lseek_r+0x20>)
 8000928:	4604      	mov	r4, r0
 800092a:	4608      	mov	r0, r1
 800092c:	4611      	mov	r1, r2
 800092e:	2200      	movs	r2, #0
 8000930:	602a      	str	r2, [r5, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	f7ff fd7e 	bl	8000434 <_lseek>
 8000938:	1c43      	adds	r3, r0, #1
 800093a:	d102      	bne.n	8000942 <_lseek_r+0x1e>
 800093c:	682b      	ldr	r3, [r5, #0]
 800093e:	b103      	cbz	r3, 8000942 <_lseek_r+0x1e>
 8000940:	6023      	str	r3, [r4, #0]
 8000942:	bd38      	pop	{r3, r4, r5, pc}
 8000944:	200001c0 	.word	0x200001c0

08000948 <_read_r>:
 8000948:	b538      	push	{r3, r4, r5, lr}
 800094a:	4d07      	ldr	r5, [pc, #28]	; (8000968 <_read_r+0x20>)
 800094c:	4604      	mov	r4, r0
 800094e:	4608      	mov	r0, r1
 8000950:	4611      	mov	r1, r2
 8000952:	2200      	movs	r2, #0
 8000954:	602a      	str	r2, [r5, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f7ff fd0c 	bl	8000374 <_read>
 800095c:	1c43      	adds	r3, r0, #1
 800095e:	d102      	bne.n	8000966 <_read_r+0x1e>
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	b103      	cbz	r3, 8000966 <_read_r+0x1e>
 8000964:	6023      	str	r3, [r4, #0]
 8000966:	bd38      	pop	{r3, r4, r5, pc}
 8000968:	200001c0 	.word	0x200001c0

0800096c <_write_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	4d07      	ldr	r5, [pc, #28]	; (800098c <_write_r+0x20>)
 8000970:	4604      	mov	r4, r0
 8000972:	4608      	mov	r0, r1
 8000974:	4611      	mov	r1, r2
 8000976:	2200      	movs	r2, #0
 8000978:	602a      	str	r2, [r5, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	f7ff fd17 	bl	80003ae <_write>
 8000980:	1c43      	adds	r3, r0, #1
 8000982:	d102      	bne.n	800098a <_write_r+0x1e>
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	b103      	cbz	r3, 800098a <_write_r+0x1e>
 8000988:	6023      	str	r3, [r4, #0]
 800098a:	bd38      	pop	{r3, r4, r5, pc}
 800098c:	200001c0 	.word	0x200001c0

08000990 <__errno>:
 8000990:	4b01      	ldr	r3, [pc, #4]	; (8000998 <__errno+0x8>)
 8000992:	6818      	ldr	r0, [r3, #0]
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000005c 	.word	0x2000005c

0800099c <__libc_init_array>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	4d0d      	ldr	r5, [pc, #52]	; (80009d4 <__libc_init_array+0x38>)
 80009a0:	4c0d      	ldr	r4, [pc, #52]	; (80009d8 <__libc_init_array+0x3c>)
 80009a2:	1b64      	subs	r4, r4, r5
 80009a4:	10a4      	asrs	r4, r4, #2
 80009a6:	2600      	movs	r6, #0
 80009a8:	42a6      	cmp	r6, r4
 80009aa:	d109      	bne.n	80009c0 <__libc_init_array+0x24>
 80009ac:	4d0b      	ldr	r5, [pc, #44]	; (80009dc <__libc_init_array+0x40>)
 80009ae:	4c0c      	ldr	r4, [pc, #48]	; (80009e0 <__libc_init_array+0x44>)
 80009b0:	f000 fdc0 	bl	8001534 <_init>
 80009b4:	1b64      	subs	r4, r4, r5
 80009b6:	10a4      	asrs	r4, r4, #2
 80009b8:	2600      	movs	r6, #0
 80009ba:	42a6      	cmp	r6, r4
 80009bc:	d105      	bne.n	80009ca <__libc_init_array+0x2e>
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c4:	4798      	blx	r3
 80009c6:	3601      	adds	r6, #1
 80009c8:	e7ee      	b.n	80009a8 <__libc_init_array+0xc>
 80009ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ce:	4798      	blx	r3
 80009d0:	3601      	adds	r6, #1
 80009d2:	e7f2      	b.n	80009ba <__libc_init_array+0x1e>
 80009d4:	08001594 	.word	0x08001594
 80009d8:	08001594 	.word	0x08001594
 80009dc:	08001594 	.word	0x08001594
 80009e0:	08001598 	.word	0x08001598

080009e4 <__retarget_lock_init_recursive>:
 80009e4:	4770      	bx	lr

080009e6 <__retarget_lock_acquire_recursive>:
 80009e6:	4770      	bx	lr

080009e8 <__retarget_lock_release_recursive>:
 80009e8:	4770      	bx	lr
	...

080009ec <_free_r>:
 80009ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009ee:	2900      	cmp	r1, #0
 80009f0:	d044      	beq.n	8000a7c <_free_r+0x90>
 80009f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009f6:	9001      	str	r0, [sp, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f1a1 0404 	sub.w	r4, r1, #4
 80009fe:	bfb8      	it	lt
 8000a00:	18e4      	addlt	r4, r4, r3
 8000a02:	f000 f8df 	bl	8000bc4 <__malloc_lock>
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <_free_r+0x94>)
 8000a08:	9801      	ldr	r0, [sp, #4]
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	b933      	cbnz	r3, 8000a1c <_free_r+0x30>
 8000a0e:	6063      	str	r3, [r4, #4]
 8000a10:	6014      	str	r4, [r2, #0]
 8000a12:	b003      	add	sp, #12
 8000a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a18:	f000 b8da 	b.w	8000bd0 <__malloc_unlock>
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d908      	bls.n	8000a32 <_free_r+0x46>
 8000a20:	6825      	ldr	r5, [r4, #0]
 8000a22:	1961      	adds	r1, r4, r5
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf01      	itttt	eq
 8000a28:	6819      	ldreq	r1, [r3, #0]
 8000a2a:	685b      	ldreq	r3, [r3, #4]
 8000a2c:	1949      	addeq	r1, r1, r5
 8000a2e:	6021      	streq	r1, [r4, #0]
 8000a30:	e7ed      	b.n	8000a0e <_free_r+0x22>
 8000a32:	461a      	mov	r2, r3
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	b10b      	cbz	r3, 8000a3c <_free_r+0x50>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d9fa      	bls.n	8000a32 <_free_r+0x46>
 8000a3c:	6811      	ldr	r1, [r2, #0]
 8000a3e:	1855      	adds	r5, r2, r1
 8000a40:	42a5      	cmp	r5, r4
 8000a42:	d10b      	bne.n	8000a5c <_free_r+0x70>
 8000a44:	6824      	ldr	r4, [r4, #0]
 8000a46:	4421      	add	r1, r4
 8000a48:	1854      	adds	r4, r2, r1
 8000a4a:	42a3      	cmp	r3, r4
 8000a4c:	6011      	str	r1, [r2, #0]
 8000a4e:	d1e0      	bne.n	8000a12 <_free_r+0x26>
 8000a50:	681c      	ldr	r4, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	6053      	str	r3, [r2, #4]
 8000a56:	440c      	add	r4, r1
 8000a58:	6014      	str	r4, [r2, #0]
 8000a5a:	e7da      	b.n	8000a12 <_free_r+0x26>
 8000a5c:	d902      	bls.n	8000a64 <_free_r+0x78>
 8000a5e:	230c      	movs	r3, #12
 8000a60:	6003      	str	r3, [r0, #0]
 8000a62:	e7d6      	b.n	8000a12 <_free_r+0x26>
 8000a64:	6825      	ldr	r5, [r4, #0]
 8000a66:	1961      	adds	r1, r4, r5
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	bf04      	itt	eq
 8000a6c:	6819      	ldreq	r1, [r3, #0]
 8000a6e:	685b      	ldreq	r3, [r3, #4]
 8000a70:	6063      	str	r3, [r4, #4]
 8000a72:	bf04      	itt	eq
 8000a74:	1949      	addeq	r1, r1, r5
 8000a76:	6021      	streq	r1, [r4, #0]
 8000a78:	6054      	str	r4, [r2, #4]
 8000a7a:	e7ca      	b.n	8000a12 <_free_r+0x26>
 8000a7c:	b003      	add	sp, #12
 8000a7e:	bd30      	pop	{r4, r5, pc}
 8000a80:	200001c8 	.word	0x200001c8

08000a84 <sbrk_aligned>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4e0e      	ldr	r6, [pc, #56]	; (8000ac0 <sbrk_aligned+0x3c>)
 8000a88:	460c      	mov	r4, r1
 8000a8a:	6831      	ldr	r1, [r6, #0]
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	b911      	cbnz	r1, 8000a96 <sbrk_aligned+0x12>
 8000a90:	f000 fcbc 	bl	800140c <_sbrk_r>
 8000a94:	6030      	str	r0, [r6, #0]
 8000a96:	4621      	mov	r1, r4
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 fcb7 	bl	800140c <_sbrk_r>
 8000a9e:	1c43      	adds	r3, r0, #1
 8000aa0:	d00a      	beq.n	8000ab8 <sbrk_aligned+0x34>
 8000aa2:	1cc4      	adds	r4, r0, #3
 8000aa4:	f024 0403 	bic.w	r4, r4, #3
 8000aa8:	42a0      	cmp	r0, r4
 8000aaa:	d007      	beq.n	8000abc <sbrk_aligned+0x38>
 8000aac:	1a21      	subs	r1, r4, r0
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f000 fcac 	bl	800140c <_sbrk_r>
 8000ab4:	3001      	adds	r0, #1
 8000ab6:	d101      	bne.n	8000abc <sbrk_aligned+0x38>
 8000ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8000abc:	4620      	mov	r0, r4
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	200001cc 	.word	0x200001cc

08000ac4 <_malloc_r>:
 8000ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac8:	1ccd      	adds	r5, r1, #3
 8000aca:	f025 0503 	bic.w	r5, r5, #3
 8000ace:	3508      	adds	r5, #8
 8000ad0:	2d0c      	cmp	r5, #12
 8000ad2:	bf38      	it	cc
 8000ad4:	250c      	movcc	r5, #12
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	4607      	mov	r7, r0
 8000ada:	db01      	blt.n	8000ae0 <_malloc_r+0x1c>
 8000adc:	42a9      	cmp	r1, r5
 8000ade:	d905      	bls.n	8000aec <_malloc_r+0x28>
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	4630      	mov	r0, r6
 8000ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000bc0 <_malloc_r+0xfc>
 8000af0:	f000 f868 	bl	8000bc4 <__malloc_lock>
 8000af4:	f8d8 3000 	ldr.w	r3, [r8]
 8000af8:	461c      	mov	r4, r3
 8000afa:	bb5c      	cbnz	r4, 8000b54 <_malloc_r+0x90>
 8000afc:	4629      	mov	r1, r5
 8000afe:	4638      	mov	r0, r7
 8000b00:	f7ff ffc0 	bl	8000a84 <sbrk_aligned>
 8000b04:	1c43      	adds	r3, r0, #1
 8000b06:	4604      	mov	r4, r0
 8000b08:	d155      	bne.n	8000bb6 <_malloc_r+0xf2>
 8000b0a:	f8d8 4000 	ldr.w	r4, [r8]
 8000b0e:	4626      	mov	r6, r4
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d145      	bne.n	8000ba0 <_malloc_r+0xdc>
 8000b14:	2c00      	cmp	r4, #0
 8000b16:	d048      	beq.n	8000baa <_malloc_r+0xe6>
 8000b18:	6823      	ldr	r3, [r4, #0]
 8000b1a:	4631      	mov	r1, r6
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	eb04 0903 	add.w	r9, r4, r3
 8000b22:	f000 fc73 	bl	800140c <_sbrk_r>
 8000b26:	4581      	cmp	r9, r0
 8000b28:	d13f      	bne.n	8000baa <_malloc_r+0xe6>
 8000b2a:	6821      	ldr	r1, [r4, #0]
 8000b2c:	1a6d      	subs	r5, r5, r1
 8000b2e:	4629      	mov	r1, r5
 8000b30:	4638      	mov	r0, r7
 8000b32:	f7ff ffa7 	bl	8000a84 <sbrk_aligned>
 8000b36:	3001      	adds	r0, #1
 8000b38:	d037      	beq.n	8000baa <_malloc_r+0xe6>
 8000b3a:	6823      	ldr	r3, [r4, #0]
 8000b3c:	442b      	add	r3, r5
 8000b3e:	6023      	str	r3, [r4, #0]
 8000b40:	f8d8 3000 	ldr.w	r3, [r8]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d038      	beq.n	8000bba <_malloc_r+0xf6>
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	d12b      	bne.n	8000ba6 <_malloc_r+0xe2>
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	e00f      	b.n	8000b74 <_malloc_r+0xb0>
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	1b52      	subs	r2, r2, r5
 8000b58:	d41f      	bmi.n	8000b9a <_malloc_r+0xd6>
 8000b5a:	2a0b      	cmp	r2, #11
 8000b5c:	d917      	bls.n	8000b8e <_malloc_r+0xca>
 8000b5e:	1961      	adds	r1, r4, r5
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	6025      	str	r5, [r4, #0]
 8000b64:	bf18      	it	ne
 8000b66:	6059      	strne	r1, [r3, #4]
 8000b68:	6863      	ldr	r3, [r4, #4]
 8000b6a:	bf08      	it	eq
 8000b6c:	f8c8 1000 	streq.w	r1, [r8]
 8000b70:	5162      	str	r2, [r4, r5]
 8000b72:	604b      	str	r3, [r1, #4]
 8000b74:	4638      	mov	r0, r7
 8000b76:	f104 060b 	add.w	r6, r4, #11
 8000b7a:	f000 f829 	bl	8000bd0 <__malloc_unlock>
 8000b7e:	f026 0607 	bic.w	r6, r6, #7
 8000b82:	1d23      	adds	r3, r4, #4
 8000b84:	1af2      	subs	r2, r6, r3
 8000b86:	d0ae      	beq.n	8000ae6 <_malloc_r+0x22>
 8000b88:	1b9b      	subs	r3, r3, r6
 8000b8a:	50a3      	str	r3, [r4, r2]
 8000b8c:	e7ab      	b.n	8000ae6 <_malloc_r+0x22>
 8000b8e:	42a3      	cmp	r3, r4
 8000b90:	6862      	ldr	r2, [r4, #4]
 8000b92:	d1dd      	bne.n	8000b50 <_malloc_r+0x8c>
 8000b94:	f8c8 2000 	str.w	r2, [r8]
 8000b98:	e7ec      	b.n	8000b74 <_malloc_r+0xb0>
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	6864      	ldr	r4, [r4, #4]
 8000b9e:	e7ac      	b.n	8000afa <_malloc_r+0x36>
 8000ba0:	4634      	mov	r4, r6
 8000ba2:	6876      	ldr	r6, [r6, #4]
 8000ba4:	e7b4      	b.n	8000b10 <_malloc_r+0x4c>
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	e7cc      	b.n	8000b44 <_malloc_r+0x80>
 8000baa:	230c      	movs	r3, #12
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4638      	mov	r0, r7
 8000bb0:	f000 f80e 	bl	8000bd0 <__malloc_unlock>
 8000bb4:	e797      	b.n	8000ae6 <_malloc_r+0x22>
 8000bb6:	6025      	str	r5, [r4, #0]
 8000bb8:	e7dc      	b.n	8000b74 <_malloc_r+0xb0>
 8000bba:	605b      	str	r3, [r3, #4]
 8000bbc:	deff      	udf	#255	; 0xff
 8000bbe:	bf00      	nop
 8000bc0:	200001c8 	.word	0x200001c8

08000bc4 <__malloc_lock>:
 8000bc4:	4801      	ldr	r0, [pc, #4]	; (8000bcc <__malloc_lock+0x8>)
 8000bc6:	f7ff bf0e 	b.w	80009e6 <__retarget_lock_acquire_recursive>
 8000bca:	bf00      	nop
 8000bcc:	200001c4 	.word	0x200001c4

08000bd0 <__malloc_unlock>:
 8000bd0:	4801      	ldr	r0, [pc, #4]	; (8000bd8 <__malloc_unlock+0x8>)
 8000bd2:	f7ff bf09 	b.w	80009e8 <__retarget_lock_release_recursive>
 8000bd6:	bf00      	nop
 8000bd8:	200001c4 	.word	0x200001c4

08000bdc <__sfputc_r>:
 8000bdc:	6893      	ldr	r3, [r2, #8]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	b410      	push	{r4}
 8000be4:	6093      	str	r3, [r2, #8]
 8000be6:	da08      	bge.n	8000bfa <__sfputc_r+0x1e>
 8000be8:	6994      	ldr	r4, [r2, #24]
 8000bea:	42a3      	cmp	r3, r4
 8000bec:	db01      	blt.n	8000bf2 <__sfputc_r+0x16>
 8000bee:	290a      	cmp	r1, #10
 8000bf0:	d103      	bne.n	8000bfa <__sfputc_r+0x1e>
 8000bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bf6:	f000 bb73 	b.w	80012e0 <__swbuf_r>
 8000bfa:	6813      	ldr	r3, [r2, #0]
 8000bfc:	1c58      	adds	r0, r3, #1
 8000bfe:	6010      	str	r0, [r2, #0]
 8000c00:	7019      	strb	r1, [r3, #0]
 8000c02:	4608      	mov	r0, r1
 8000c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <__sfputs_r>:
 8000c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0c:	4606      	mov	r6, r0
 8000c0e:	460f      	mov	r7, r1
 8000c10:	4614      	mov	r4, r2
 8000c12:	18d5      	adds	r5, r2, r3
 8000c14:	42ac      	cmp	r4, r5
 8000c16:	d101      	bne.n	8000c1c <__sfputs_r+0x12>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e007      	b.n	8000c2c <__sfputs_r+0x22>
 8000c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c20:	463a      	mov	r2, r7
 8000c22:	4630      	mov	r0, r6
 8000c24:	f7ff ffda 	bl	8000bdc <__sfputc_r>
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	d1f3      	bne.n	8000c14 <__sfputs_r+0xa>
 8000c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c30 <_vfiprintf_r>:
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	460d      	mov	r5, r1
 8000c36:	b09d      	sub	sp, #116	; 0x74
 8000c38:	4614      	mov	r4, r2
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	b118      	cbz	r0, 8000c48 <_vfiprintf_r+0x18>
 8000c40:	6a03      	ldr	r3, [r0, #32]
 8000c42:	b90b      	cbnz	r3, 8000c48 <_vfiprintf_r+0x18>
 8000c44:	f7ff fdca 	bl	80007dc <__sinit>
 8000c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c4a:	07d9      	lsls	r1, r3, #31
 8000c4c:	d405      	bmi.n	8000c5a <_vfiprintf_r+0x2a>
 8000c4e:	89ab      	ldrh	r3, [r5, #12]
 8000c50:	059a      	lsls	r2, r3, #22
 8000c52:	d402      	bmi.n	8000c5a <_vfiprintf_r+0x2a>
 8000c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c56:	f7ff fec6 	bl	80009e6 <__retarget_lock_acquire_recursive>
 8000c5a:	89ab      	ldrh	r3, [r5, #12]
 8000c5c:	071b      	lsls	r3, r3, #28
 8000c5e:	d501      	bpl.n	8000c64 <_vfiprintf_r+0x34>
 8000c60:	692b      	ldr	r3, [r5, #16]
 8000c62:	b99b      	cbnz	r3, 8000c8c <_vfiprintf_r+0x5c>
 8000c64:	4629      	mov	r1, r5
 8000c66:	4630      	mov	r0, r6
 8000c68:	f000 fb78 	bl	800135c <__swsetup_r>
 8000c6c:	b170      	cbz	r0, 8000c8c <_vfiprintf_r+0x5c>
 8000c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c70:	07dc      	lsls	r4, r3, #31
 8000c72:	d504      	bpl.n	8000c7e <_vfiprintf_r+0x4e>
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	b01d      	add	sp, #116	; 0x74
 8000c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c7e:	89ab      	ldrh	r3, [r5, #12]
 8000c80:	0598      	lsls	r0, r3, #22
 8000c82:	d4f7      	bmi.n	8000c74 <_vfiprintf_r+0x44>
 8000c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c86:	f7ff feaf 	bl	80009e8 <__retarget_lock_release_recursive>
 8000c8a:	e7f3      	b.n	8000c74 <_vfiprintf_r+0x44>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c90:	2320      	movs	r3, #32
 8000c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c9a:	2330      	movs	r3, #48	; 0x30
 8000c9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e50 <_vfiprintf_r+0x220>
 8000ca0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ca4:	f04f 0901 	mov.w	r9, #1
 8000ca8:	4623      	mov	r3, r4
 8000caa:	469a      	mov	sl, r3
 8000cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cb0:	b10a      	cbz	r2, 8000cb6 <_vfiprintf_r+0x86>
 8000cb2:	2a25      	cmp	r2, #37	; 0x25
 8000cb4:	d1f9      	bne.n	8000caa <_vfiprintf_r+0x7a>
 8000cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8000cba:	d00b      	beq.n	8000cd4 <_vfiprintf_r+0xa4>
 8000cbc:	465b      	mov	r3, fp
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	4629      	mov	r1, r5
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	f7ff ffa1 	bl	8000c0a <__sfputs_r>
 8000cc8:	3001      	adds	r0, #1
 8000cca:	f000 80a9 	beq.w	8000e20 <_vfiprintf_r+0x1f0>
 8000cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cd0:	445a      	add	r2, fp
 8000cd2:	9209      	str	r2, [sp, #36]	; 0x24
 8000cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 80a1 	beq.w	8000e20 <_vfiprintf_r+0x1f0>
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ce8:	f10a 0a01 	add.w	sl, sl, #1
 8000cec:	9304      	str	r3, [sp, #16]
 8000cee:	9307      	str	r3, [sp, #28]
 8000cf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000cf4:	931a      	str	r3, [sp, #104]	; 0x68
 8000cf6:	4654      	mov	r4, sl
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cfe:	4854      	ldr	r0, [pc, #336]	; (8000e50 <_vfiprintf_r+0x220>)
 8000d00:	f7ff fa6e 	bl	80001e0 <memchr>
 8000d04:	9a04      	ldr	r2, [sp, #16]
 8000d06:	b9d8      	cbnz	r0, 8000d40 <_vfiprintf_r+0x110>
 8000d08:	06d1      	lsls	r1, r2, #27
 8000d0a:	bf44      	itt	mi
 8000d0c:	2320      	movmi	r3, #32
 8000d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d12:	0713      	lsls	r3, r2, #28
 8000d14:	bf44      	itt	mi
 8000d16:	232b      	movmi	r3, #43	; 0x2b
 8000d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d20:	2b2a      	cmp	r3, #42	; 0x2a
 8000d22:	d015      	beq.n	8000d50 <_vfiprintf_r+0x120>
 8000d24:	9a07      	ldr	r2, [sp, #28]
 8000d26:	4654      	mov	r4, sl
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f04f 0c0a 	mov.w	ip, #10
 8000d2e:	4621      	mov	r1, r4
 8000d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d34:	3b30      	subs	r3, #48	; 0x30
 8000d36:	2b09      	cmp	r3, #9
 8000d38:	d94d      	bls.n	8000dd6 <_vfiprintf_r+0x1a6>
 8000d3a:	b1b0      	cbz	r0, 8000d6a <_vfiprintf_r+0x13a>
 8000d3c:	9207      	str	r2, [sp, #28]
 8000d3e:	e014      	b.n	8000d6a <_vfiprintf_r+0x13a>
 8000d40:	eba0 0308 	sub.w	r3, r0, r8
 8000d44:	fa09 f303 	lsl.w	r3, r9, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	9304      	str	r3, [sp, #16]
 8000d4c:	46a2      	mov	sl, r4
 8000d4e:	e7d2      	b.n	8000cf6 <_vfiprintf_r+0xc6>
 8000d50:	9b03      	ldr	r3, [sp, #12]
 8000d52:	1d19      	adds	r1, r3, #4
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	9103      	str	r1, [sp, #12]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	bfbb      	ittet	lt
 8000d5c:	425b      	neglt	r3, r3
 8000d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8000d62:	9307      	strge	r3, [sp, #28]
 8000d64:	9307      	strlt	r3, [sp, #28]
 8000d66:	bfb8      	it	lt
 8000d68:	9204      	strlt	r2, [sp, #16]
 8000d6a:	7823      	ldrb	r3, [r4, #0]
 8000d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d6e:	d10c      	bne.n	8000d8a <_vfiprintf_r+0x15a>
 8000d70:	7863      	ldrb	r3, [r4, #1]
 8000d72:	2b2a      	cmp	r3, #42	; 0x2a
 8000d74:	d134      	bne.n	8000de0 <_vfiprintf_r+0x1b0>
 8000d76:	9b03      	ldr	r3, [sp, #12]
 8000d78:	1d1a      	adds	r2, r3, #4
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	9203      	str	r2, [sp, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bfb8      	it	lt
 8000d82:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d86:	3402      	adds	r4, #2
 8000d88:	9305      	str	r3, [sp, #20]
 8000d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e60 <_vfiprintf_r+0x230>
 8000d8e:	7821      	ldrb	r1, [r4, #0]
 8000d90:	2203      	movs	r2, #3
 8000d92:	4650      	mov	r0, sl
 8000d94:	f7ff fa24 	bl	80001e0 <memchr>
 8000d98:	b138      	cbz	r0, 8000daa <_vfiprintf_r+0x17a>
 8000d9a:	9b04      	ldr	r3, [sp, #16]
 8000d9c:	eba0 000a 	sub.w	r0, r0, sl
 8000da0:	2240      	movs	r2, #64	; 0x40
 8000da2:	4082      	lsls	r2, r0
 8000da4:	4313      	orrs	r3, r2
 8000da6:	3401      	adds	r4, #1
 8000da8:	9304      	str	r3, [sp, #16]
 8000daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dae:	4829      	ldr	r0, [pc, #164]	; (8000e54 <_vfiprintf_r+0x224>)
 8000db0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000db4:	2206      	movs	r2, #6
 8000db6:	f7ff fa13 	bl	80001e0 <memchr>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d03f      	beq.n	8000e3e <_vfiprintf_r+0x20e>
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <_vfiprintf_r+0x228>)
 8000dc0:	bb1b      	cbnz	r3, 8000e0a <_vfiprintf_r+0x1da>
 8000dc2:	9b03      	ldr	r3, [sp, #12]
 8000dc4:	3307      	adds	r3, #7
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	3308      	adds	r3, #8
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dd0:	443b      	add	r3, r7
 8000dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8000dd4:	e768      	b.n	8000ca8 <_vfiprintf_r+0x78>
 8000dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dda:	460c      	mov	r4, r1
 8000ddc:	2001      	movs	r0, #1
 8000dde:	e7a6      	b.n	8000d2e <_vfiprintf_r+0xfe>
 8000de0:	2300      	movs	r3, #0
 8000de2:	3401      	adds	r4, #1
 8000de4:	9305      	str	r3, [sp, #20]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 0c0a 	mov.w	ip, #10
 8000dec:	4620      	mov	r0, r4
 8000dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000df2:	3a30      	subs	r2, #48	; 0x30
 8000df4:	2a09      	cmp	r2, #9
 8000df6:	d903      	bls.n	8000e00 <_vfiprintf_r+0x1d0>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0c6      	beq.n	8000d8a <_vfiprintf_r+0x15a>
 8000dfc:	9105      	str	r1, [sp, #20]
 8000dfe:	e7c4      	b.n	8000d8a <_vfiprintf_r+0x15a>
 8000e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e04:	4604      	mov	r4, r0
 8000e06:	2301      	movs	r3, #1
 8000e08:	e7f0      	b.n	8000dec <_vfiprintf_r+0x1bc>
 8000e0a:	ab03      	add	r3, sp, #12
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	462a      	mov	r2, r5
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <_vfiprintf_r+0x22c>)
 8000e12:	a904      	add	r1, sp, #16
 8000e14:	4630      	mov	r0, r6
 8000e16:	f3af 8000 	nop.w
 8000e1a:	4607      	mov	r7, r0
 8000e1c:	1c78      	adds	r0, r7, #1
 8000e1e:	d1d6      	bne.n	8000dce <_vfiprintf_r+0x19e>
 8000e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e22:	07d9      	lsls	r1, r3, #31
 8000e24:	d405      	bmi.n	8000e32 <_vfiprintf_r+0x202>
 8000e26:	89ab      	ldrh	r3, [r5, #12]
 8000e28:	059a      	lsls	r2, r3, #22
 8000e2a:	d402      	bmi.n	8000e32 <_vfiprintf_r+0x202>
 8000e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e2e:	f7ff fddb 	bl	80009e8 <__retarget_lock_release_recursive>
 8000e32:	89ab      	ldrh	r3, [r5, #12]
 8000e34:	065b      	lsls	r3, r3, #25
 8000e36:	f53f af1d 	bmi.w	8000c74 <_vfiprintf_r+0x44>
 8000e3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e3c:	e71c      	b.n	8000c78 <_vfiprintf_r+0x48>
 8000e3e:	ab03      	add	r3, sp, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	462a      	mov	r2, r5
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <_vfiprintf_r+0x22c>)
 8000e46:	a904      	add	r1, sp, #16
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f000 f879 	bl	8000f40 <_printf_i>
 8000e4e:	e7e4      	b.n	8000e1a <_vfiprintf_r+0x1ea>
 8000e50:	08001561 	.word	0x08001561
 8000e54:	0800156b 	.word	0x0800156b
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	08000c0b 	.word	0x08000c0b
 8000e60:	08001567 	.word	0x08001567

08000e64 <_printf_common>:
 8000e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	4616      	mov	r6, r2
 8000e6a:	4699      	mov	r9, r3
 8000e6c:	688a      	ldr	r2, [r1, #8]
 8000e6e:	690b      	ldr	r3, [r1, #16]
 8000e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e74:	4293      	cmp	r3, r2
 8000e76:	bfb8      	it	lt
 8000e78:	4613      	movlt	r3, r2
 8000e7a:	6033      	str	r3, [r6, #0]
 8000e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e80:	4607      	mov	r7, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	b10a      	cbz	r2, 8000e8a <_printf_common+0x26>
 8000e86:	3301      	adds	r3, #1
 8000e88:	6033      	str	r3, [r6, #0]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	0699      	lsls	r1, r3, #26
 8000e8e:	bf42      	ittt	mi
 8000e90:	6833      	ldrmi	r3, [r6, #0]
 8000e92:	3302      	addmi	r3, #2
 8000e94:	6033      	strmi	r3, [r6, #0]
 8000e96:	6825      	ldr	r5, [r4, #0]
 8000e98:	f015 0506 	ands.w	r5, r5, #6
 8000e9c:	d106      	bne.n	8000eac <_printf_common+0x48>
 8000e9e:	f104 0a19 	add.w	sl, r4, #25
 8000ea2:	68e3      	ldr	r3, [r4, #12]
 8000ea4:	6832      	ldr	r2, [r6, #0]
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	42ab      	cmp	r3, r5
 8000eaa:	dc26      	bgt.n	8000efa <_printf_common+0x96>
 8000eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000eb0:	1e13      	subs	r3, r2, #0
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	bf18      	it	ne
 8000eb6:	2301      	movne	r3, #1
 8000eb8:	0692      	lsls	r2, r2, #26
 8000eba:	d42b      	bmi.n	8000f14 <_printf_common+0xb0>
 8000ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ec0:	4649      	mov	r1, r9
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	47c0      	blx	r8
 8000ec6:	3001      	adds	r0, #1
 8000ec8:	d01e      	beq.n	8000f08 <_printf_common+0xa4>
 8000eca:	6823      	ldr	r3, [r4, #0]
 8000ecc:	6922      	ldr	r2, [r4, #16]
 8000ece:	f003 0306 	and.w	r3, r3, #6
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf02      	ittt	eq
 8000ed6:	68e5      	ldreq	r5, [r4, #12]
 8000ed8:	6833      	ldreq	r3, [r6, #0]
 8000eda:	1aed      	subeq	r5, r5, r3
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	bf0c      	ite	eq
 8000ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee4:	2500      	movne	r5, #0
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	bfc4      	itt	gt
 8000eea:	1a9b      	subgt	r3, r3, r2
 8000eec:	18ed      	addgt	r5, r5, r3
 8000eee:	2600      	movs	r6, #0
 8000ef0:	341a      	adds	r4, #26
 8000ef2:	42b5      	cmp	r5, r6
 8000ef4:	d11a      	bne.n	8000f2c <_printf_common+0xc8>
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e008      	b.n	8000f0c <_printf_common+0xa8>
 8000efa:	2301      	movs	r3, #1
 8000efc:	4652      	mov	r2, sl
 8000efe:	4649      	mov	r1, r9
 8000f00:	4638      	mov	r0, r7
 8000f02:	47c0      	blx	r8
 8000f04:	3001      	adds	r0, #1
 8000f06:	d103      	bne.n	8000f10 <_printf_common+0xac>
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	3501      	adds	r5, #1
 8000f12:	e7c6      	b.n	8000ea2 <_printf_common+0x3e>
 8000f14:	18e1      	adds	r1, r4, r3
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	2030      	movs	r0, #48	; 0x30
 8000f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f1e:	4422      	add	r2, r4
 8000f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f28:	3302      	adds	r3, #2
 8000f2a:	e7c7      	b.n	8000ebc <_printf_common+0x58>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	4622      	mov	r2, r4
 8000f30:	4649      	mov	r1, r9
 8000f32:	4638      	mov	r0, r7
 8000f34:	47c0      	blx	r8
 8000f36:	3001      	adds	r0, #1
 8000f38:	d0e6      	beq.n	8000f08 <_printf_common+0xa4>
 8000f3a:	3601      	adds	r6, #1
 8000f3c:	e7d9      	b.n	8000ef2 <_printf_common+0x8e>
	...

08000f40 <_printf_i>:
 8000f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	7e0f      	ldrb	r7, [r1, #24]
 8000f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f48:	2f78      	cmp	r7, #120	; 0x78
 8000f4a:	4691      	mov	r9, r2
 8000f4c:	4680      	mov	r8, r0
 8000f4e:	460c      	mov	r4, r1
 8000f50:	469a      	mov	sl, r3
 8000f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f56:	d807      	bhi.n	8000f68 <_printf_i+0x28>
 8000f58:	2f62      	cmp	r7, #98	; 0x62
 8000f5a:	d80a      	bhi.n	8000f72 <_printf_i+0x32>
 8000f5c:	2f00      	cmp	r7, #0
 8000f5e:	f000 80d4 	beq.w	800110a <_printf_i+0x1ca>
 8000f62:	2f58      	cmp	r7, #88	; 0x58
 8000f64:	f000 80c0 	beq.w	80010e8 <_printf_i+0x1a8>
 8000f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f70:	e03a      	b.n	8000fe8 <_printf_i+0xa8>
 8000f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f76:	2b15      	cmp	r3, #21
 8000f78:	d8f6      	bhi.n	8000f68 <_printf_i+0x28>
 8000f7a:	a101      	add	r1, pc, #4	; (adr r1, 8000f80 <_printf_i+0x40>)
 8000f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f80:	08000fd9 	.word	0x08000fd9
 8000f84:	08000fed 	.word	0x08000fed
 8000f88:	08000f69 	.word	0x08000f69
 8000f8c:	08000f69 	.word	0x08000f69
 8000f90:	08000f69 	.word	0x08000f69
 8000f94:	08000f69 	.word	0x08000f69
 8000f98:	08000fed 	.word	0x08000fed
 8000f9c:	08000f69 	.word	0x08000f69
 8000fa0:	08000f69 	.word	0x08000f69
 8000fa4:	08000f69 	.word	0x08000f69
 8000fa8:	08000f69 	.word	0x08000f69
 8000fac:	080010f1 	.word	0x080010f1
 8000fb0:	08001019 	.word	0x08001019
 8000fb4:	080010ab 	.word	0x080010ab
 8000fb8:	08000f69 	.word	0x08000f69
 8000fbc:	08000f69 	.word	0x08000f69
 8000fc0:	08001113 	.word	0x08001113
 8000fc4:	08000f69 	.word	0x08000f69
 8000fc8:	08001019 	.word	0x08001019
 8000fcc:	08000f69 	.word	0x08000f69
 8000fd0:	08000f69 	.word	0x08000f69
 8000fd4:	080010b3 	.word	0x080010b3
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	1d1a      	adds	r2, r3, #4
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	602a      	str	r2, [r5, #0]
 8000fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e09f      	b.n	800112c <_printf_i+0x1ec>
 8000fec:	6820      	ldr	r0, [r4, #0]
 8000fee:	682b      	ldr	r3, [r5, #0]
 8000ff0:	0607      	lsls	r7, r0, #24
 8000ff2:	f103 0104 	add.w	r1, r3, #4
 8000ff6:	6029      	str	r1, [r5, #0]
 8000ff8:	d501      	bpl.n	8000ffe <_printf_i+0xbe>
 8000ffa:	681e      	ldr	r6, [r3, #0]
 8000ffc:	e003      	b.n	8001006 <_printf_i+0xc6>
 8000ffe:	0646      	lsls	r6, r0, #25
 8001000:	d5fb      	bpl.n	8000ffa <_printf_i+0xba>
 8001002:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001006:	2e00      	cmp	r6, #0
 8001008:	da03      	bge.n	8001012 <_printf_i+0xd2>
 800100a:	232d      	movs	r3, #45	; 0x2d
 800100c:	4276      	negs	r6, r6
 800100e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001012:	485a      	ldr	r0, [pc, #360]	; (800117c <_printf_i+0x23c>)
 8001014:	230a      	movs	r3, #10
 8001016:	e012      	b.n	800103e <_printf_i+0xfe>
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	1d19      	adds	r1, r3, #4
 800101e:	6029      	str	r1, [r5, #0]
 8001020:	0605      	lsls	r5, r0, #24
 8001022:	d501      	bpl.n	8001028 <_printf_i+0xe8>
 8001024:	681e      	ldr	r6, [r3, #0]
 8001026:	e002      	b.n	800102e <_printf_i+0xee>
 8001028:	0641      	lsls	r1, r0, #25
 800102a:	d5fb      	bpl.n	8001024 <_printf_i+0xe4>
 800102c:	881e      	ldrh	r6, [r3, #0]
 800102e:	4853      	ldr	r0, [pc, #332]	; (800117c <_printf_i+0x23c>)
 8001030:	2f6f      	cmp	r7, #111	; 0x6f
 8001032:	bf0c      	ite	eq
 8001034:	2308      	moveq	r3, #8
 8001036:	230a      	movne	r3, #10
 8001038:	2100      	movs	r1, #0
 800103a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800103e:	6865      	ldr	r5, [r4, #4]
 8001040:	60a5      	str	r5, [r4, #8]
 8001042:	2d00      	cmp	r5, #0
 8001044:	bfa2      	ittt	ge
 8001046:	6821      	ldrge	r1, [r4, #0]
 8001048:	f021 0104 	bicge.w	r1, r1, #4
 800104c:	6021      	strge	r1, [r4, #0]
 800104e:	b90e      	cbnz	r6, 8001054 <_printf_i+0x114>
 8001050:	2d00      	cmp	r5, #0
 8001052:	d04b      	beq.n	80010ec <_printf_i+0x1ac>
 8001054:	4615      	mov	r5, r2
 8001056:	fbb6 f1f3 	udiv	r1, r6, r3
 800105a:	fb03 6711 	mls	r7, r3, r1, r6
 800105e:	5dc7      	ldrb	r7, [r0, r7]
 8001060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001064:	4637      	mov	r7, r6
 8001066:	42bb      	cmp	r3, r7
 8001068:	460e      	mov	r6, r1
 800106a:	d9f4      	bls.n	8001056 <_printf_i+0x116>
 800106c:	2b08      	cmp	r3, #8
 800106e:	d10b      	bne.n	8001088 <_printf_i+0x148>
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	07de      	lsls	r6, r3, #31
 8001074:	d508      	bpl.n	8001088 <_printf_i+0x148>
 8001076:	6923      	ldr	r3, [r4, #16]
 8001078:	6861      	ldr	r1, [r4, #4]
 800107a:	4299      	cmp	r1, r3
 800107c:	bfde      	ittt	le
 800107e:	2330      	movle	r3, #48	; 0x30
 8001080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001088:	1b52      	subs	r2, r2, r5
 800108a:	6122      	str	r2, [r4, #16]
 800108c:	f8cd a000 	str.w	sl, [sp]
 8001090:	464b      	mov	r3, r9
 8001092:	aa03      	add	r2, sp, #12
 8001094:	4621      	mov	r1, r4
 8001096:	4640      	mov	r0, r8
 8001098:	f7ff fee4 	bl	8000e64 <_printf_common>
 800109c:	3001      	adds	r0, #1
 800109e:	d14a      	bne.n	8001136 <_printf_i+0x1f6>
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	b004      	add	sp, #16
 80010a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	4833      	ldr	r0, [pc, #204]	; (8001180 <_printf_i+0x240>)
 80010b4:	2778      	movs	r7, #120	; 0x78
 80010b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	6829      	ldr	r1, [r5, #0]
 80010be:	061f      	lsls	r7, r3, #24
 80010c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80010c4:	d402      	bmi.n	80010cc <_printf_i+0x18c>
 80010c6:	065f      	lsls	r7, r3, #25
 80010c8:	bf48      	it	mi
 80010ca:	b2b6      	uxthmi	r6, r6
 80010cc:	07df      	lsls	r7, r3, #31
 80010ce:	bf48      	it	mi
 80010d0:	f043 0320 	orrmi.w	r3, r3, #32
 80010d4:	6029      	str	r1, [r5, #0]
 80010d6:	bf48      	it	mi
 80010d8:	6023      	strmi	r3, [r4, #0]
 80010da:	b91e      	cbnz	r6, 80010e4 <_printf_i+0x1a4>
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	f023 0320 	bic.w	r3, r3, #32
 80010e2:	6023      	str	r3, [r4, #0]
 80010e4:	2310      	movs	r3, #16
 80010e6:	e7a7      	b.n	8001038 <_printf_i+0xf8>
 80010e8:	4824      	ldr	r0, [pc, #144]	; (800117c <_printf_i+0x23c>)
 80010ea:	e7e4      	b.n	80010b6 <_printf_i+0x176>
 80010ec:	4615      	mov	r5, r2
 80010ee:	e7bd      	b.n	800106c <_printf_i+0x12c>
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	6826      	ldr	r6, [r4, #0]
 80010f4:	6961      	ldr	r1, [r4, #20]
 80010f6:	1d18      	adds	r0, r3, #4
 80010f8:	6028      	str	r0, [r5, #0]
 80010fa:	0635      	lsls	r5, r6, #24
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	d501      	bpl.n	8001104 <_printf_i+0x1c4>
 8001100:	6019      	str	r1, [r3, #0]
 8001102:	e002      	b.n	800110a <_printf_i+0x1ca>
 8001104:	0670      	lsls	r0, r6, #25
 8001106:	d5fb      	bpl.n	8001100 <_printf_i+0x1c0>
 8001108:	8019      	strh	r1, [r3, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	6123      	str	r3, [r4, #16]
 800110e:	4615      	mov	r5, r2
 8001110:	e7bc      	b.n	800108c <_printf_i+0x14c>
 8001112:	682b      	ldr	r3, [r5, #0]
 8001114:	1d1a      	adds	r2, r3, #4
 8001116:	602a      	str	r2, [r5, #0]
 8001118:	681d      	ldr	r5, [r3, #0]
 800111a:	6862      	ldr	r2, [r4, #4]
 800111c:	2100      	movs	r1, #0
 800111e:	4628      	mov	r0, r5
 8001120:	f7ff f85e 	bl	80001e0 <memchr>
 8001124:	b108      	cbz	r0, 800112a <_printf_i+0x1ea>
 8001126:	1b40      	subs	r0, r0, r5
 8001128:	6060      	str	r0, [r4, #4]
 800112a:	6863      	ldr	r3, [r4, #4]
 800112c:	6123      	str	r3, [r4, #16]
 800112e:	2300      	movs	r3, #0
 8001130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001134:	e7aa      	b.n	800108c <_printf_i+0x14c>
 8001136:	6923      	ldr	r3, [r4, #16]
 8001138:	462a      	mov	r2, r5
 800113a:	4649      	mov	r1, r9
 800113c:	4640      	mov	r0, r8
 800113e:	47d0      	blx	sl
 8001140:	3001      	adds	r0, #1
 8001142:	d0ad      	beq.n	80010a0 <_printf_i+0x160>
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	079b      	lsls	r3, r3, #30
 8001148:	d413      	bmi.n	8001172 <_printf_i+0x232>
 800114a:	68e0      	ldr	r0, [r4, #12]
 800114c:	9b03      	ldr	r3, [sp, #12]
 800114e:	4298      	cmp	r0, r3
 8001150:	bfb8      	it	lt
 8001152:	4618      	movlt	r0, r3
 8001154:	e7a6      	b.n	80010a4 <_printf_i+0x164>
 8001156:	2301      	movs	r3, #1
 8001158:	4632      	mov	r2, r6
 800115a:	4649      	mov	r1, r9
 800115c:	4640      	mov	r0, r8
 800115e:	47d0      	blx	sl
 8001160:	3001      	adds	r0, #1
 8001162:	d09d      	beq.n	80010a0 <_printf_i+0x160>
 8001164:	3501      	adds	r5, #1
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	9903      	ldr	r1, [sp, #12]
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	42ab      	cmp	r3, r5
 800116e:	dcf2      	bgt.n	8001156 <_printf_i+0x216>
 8001170:	e7eb      	b.n	800114a <_printf_i+0x20a>
 8001172:	2500      	movs	r5, #0
 8001174:	f104 0619 	add.w	r6, r4, #25
 8001178:	e7f5      	b.n	8001166 <_printf_i+0x226>
 800117a:	bf00      	nop
 800117c:	08001572 	.word	0x08001572
 8001180:	08001583 	.word	0x08001583

08001184 <__sflush_r>:
 8001184:	898a      	ldrh	r2, [r1, #12]
 8001186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	0710      	lsls	r0, r2, #28
 800118e:	460c      	mov	r4, r1
 8001190:	d458      	bmi.n	8001244 <__sflush_r+0xc0>
 8001192:	684b      	ldr	r3, [r1, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	dc05      	bgt.n	80011a4 <__sflush_r+0x20>
 8001198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800119a:	2b00      	cmp	r3, #0
 800119c:	dc02      	bgt.n	80011a4 <__sflush_r+0x20>
 800119e:	2000      	movs	r0, #0
 80011a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	d0f9      	beq.n	800119e <__sflush_r+0x1a>
 80011aa:	2300      	movs	r3, #0
 80011ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011b0:	682f      	ldr	r7, [r5, #0]
 80011b2:	6a21      	ldr	r1, [r4, #32]
 80011b4:	602b      	str	r3, [r5, #0]
 80011b6:	d032      	beq.n	800121e <__sflush_r+0x9a>
 80011b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	075a      	lsls	r2, r3, #29
 80011be:	d505      	bpl.n	80011cc <__sflush_r+0x48>
 80011c0:	6863      	ldr	r3, [r4, #4]
 80011c2:	1ac0      	subs	r0, r0, r3
 80011c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011c6:	b10b      	cbz	r3, 80011cc <__sflush_r+0x48>
 80011c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011ca:	1ac0      	subs	r0, r0, r3
 80011cc:	2300      	movs	r3, #0
 80011ce:	4602      	mov	r2, r0
 80011d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011d2:	6a21      	ldr	r1, [r4, #32]
 80011d4:	4628      	mov	r0, r5
 80011d6:	47b0      	blx	r6
 80011d8:	1c43      	adds	r3, r0, #1
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	d106      	bne.n	80011ec <__sflush_r+0x68>
 80011de:	6829      	ldr	r1, [r5, #0]
 80011e0:	291d      	cmp	r1, #29
 80011e2:	d82b      	bhi.n	800123c <__sflush_r+0xb8>
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <__sflush_r+0x108>)
 80011e6:	410a      	asrs	r2, r1
 80011e8:	07d6      	lsls	r6, r2, #31
 80011ea:	d427      	bmi.n	800123c <__sflush_r+0xb8>
 80011ec:	2200      	movs	r2, #0
 80011ee:	6062      	str	r2, [r4, #4]
 80011f0:	04d9      	lsls	r1, r3, #19
 80011f2:	6922      	ldr	r2, [r4, #16]
 80011f4:	6022      	str	r2, [r4, #0]
 80011f6:	d504      	bpl.n	8001202 <__sflush_r+0x7e>
 80011f8:	1c42      	adds	r2, r0, #1
 80011fa:	d101      	bne.n	8001200 <__sflush_r+0x7c>
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	b903      	cbnz	r3, 8001202 <__sflush_r+0x7e>
 8001200:	6560      	str	r0, [r4, #84]	; 0x54
 8001202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001204:	602f      	str	r7, [r5, #0]
 8001206:	2900      	cmp	r1, #0
 8001208:	d0c9      	beq.n	800119e <__sflush_r+0x1a>
 800120a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800120e:	4299      	cmp	r1, r3
 8001210:	d002      	beq.n	8001218 <__sflush_r+0x94>
 8001212:	4628      	mov	r0, r5
 8001214:	f7ff fbea 	bl	80009ec <_free_r>
 8001218:	2000      	movs	r0, #0
 800121a:	6360      	str	r0, [r4, #52]	; 0x34
 800121c:	e7c0      	b.n	80011a0 <__sflush_r+0x1c>
 800121e:	2301      	movs	r3, #1
 8001220:	4628      	mov	r0, r5
 8001222:	47b0      	blx	r6
 8001224:	1c41      	adds	r1, r0, #1
 8001226:	d1c8      	bne.n	80011ba <__sflush_r+0x36>
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0c5      	beq.n	80011ba <__sflush_r+0x36>
 800122e:	2b1d      	cmp	r3, #29
 8001230:	d001      	beq.n	8001236 <__sflush_r+0xb2>
 8001232:	2b16      	cmp	r3, #22
 8001234:	d101      	bne.n	800123a <__sflush_r+0xb6>
 8001236:	602f      	str	r7, [r5, #0]
 8001238:	e7b1      	b.n	800119e <__sflush_r+0x1a>
 800123a:	89a3      	ldrh	r3, [r4, #12]
 800123c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001240:	81a3      	strh	r3, [r4, #12]
 8001242:	e7ad      	b.n	80011a0 <__sflush_r+0x1c>
 8001244:	690f      	ldr	r7, [r1, #16]
 8001246:	2f00      	cmp	r7, #0
 8001248:	d0a9      	beq.n	800119e <__sflush_r+0x1a>
 800124a:	0793      	lsls	r3, r2, #30
 800124c:	680e      	ldr	r6, [r1, #0]
 800124e:	bf08      	it	eq
 8001250:	694b      	ldreq	r3, [r1, #20]
 8001252:	600f      	str	r7, [r1, #0]
 8001254:	bf18      	it	ne
 8001256:	2300      	movne	r3, #0
 8001258:	eba6 0807 	sub.w	r8, r6, r7
 800125c:	608b      	str	r3, [r1, #8]
 800125e:	f1b8 0f00 	cmp.w	r8, #0
 8001262:	dd9c      	ble.n	800119e <__sflush_r+0x1a>
 8001264:	6a21      	ldr	r1, [r4, #32]
 8001266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001268:	4643      	mov	r3, r8
 800126a:	463a      	mov	r2, r7
 800126c:	4628      	mov	r0, r5
 800126e:	47b0      	blx	r6
 8001270:	2800      	cmp	r0, #0
 8001272:	dc06      	bgt.n	8001282 <__sflush_r+0xfe>
 8001274:	89a3      	ldrh	r3, [r4, #12]
 8001276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127a:	81a3      	strh	r3, [r4, #12]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	e78e      	b.n	80011a0 <__sflush_r+0x1c>
 8001282:	4407      	add	r7, r0
 8001284:	eba8 0800 	sub.w	r8, r8, r0
 8001288:	e7e9      	b.n	800125e <__sflush_r+0xda>
 800128a:	bf00      	nop
 800128c:	dfbffffe 	.word	0xdfbffffe

08001290 <_fflush_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	690b      	ldr	r3, [r1, #16]
 8001294:	4605      	mov	r5, r0
 8001296:	460c      	mov	r4, r1
 8001298:	b913      	cbnz	r3, 80012a0 <_fflush_r+0x10>
 800129a:	2500      	movs	r5, #0
 800129c:	4628      	mov	r0, r5
 800129e:	bd38      	pop	{r3, r4, r5, pc}
 80012a0:	b118      	cbz	r0, 80012aa <_fflush_r+0x1a>
 80012a2:	6a03      	ldr	r3, [r0, #32]
 80012a4:	b90b      	cbnz	r3, 80012aa <_fflush_r+0x1a>
 80012a6:	f7ff fa99 	bl	80007dc <__sinit>
 80012aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f3      	beq.n	800129a <_fflush_r+0xa>
 80012b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012b4:	07d0      	lsls	r0, r2, #31
 80012b6:	d404      	bmi.n	80012c2 <_fflush_r+0x32>
 80012b8:	0599      	lsls	r1, r3, #22
 80012ba:	d402      	bmi.n	80012c2 <_fflush_r+0x32>
 80012bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012be:	f7ff fb92 	bl	80009e6 <__retarget_lock_acquire_recursive>
 80012c2:	4628      	mov	r0, r5
 80012c4:	4621      	mov	r1, r4
 80012c6:	f7ff ff5d 	bl	8001184 <__sflush_r>
 80012ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012cc:	07da      	lsls	r2, r3, #31
 80012ce:	4605      	mov	r5, r0
 80012d0:	d4e4      	bmi.n	800129c <_fflush_r+0xc>
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	059b      	lsls	r3, r3, #22
 80012d6:	d4e1      	bmi.n	800129c <_fflush_r+0xc>
 80012d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012da:	f7ff fb85 	bl	80009e8 <__retarget_lock_release_recursive>
 80012de:	e7dd      	b.n	800129c <_fflush_r+0xc>

080012e0 <__swbuf_r>:
 80012e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e2:	460e      	mov	r6, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	4605      	mov	r5, r0
 80012e8:	b118      	cbz	r0, 80012f2 <__swbuf_r+0x12>
 80012ea:	6a03      	ldr	r3, [r0, #32]
 80012ec:	b90b      	cbnz	r3, 80012f2 <__swbuf_r+0x12>
 80012ee:	f7ff fa75 	bl	80007dc <__sinit>
 80012f2:	69a3      	ldr	r3, [r4, #24]
 80012f4:	60a3      	str	r3, [r4, #8]
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	071a      	lsls	r2, r3, #28
 80012fa:	d525      	bpl.n	8001348 <__swbuf_r+0x68>
 80012fc:	6923      	ldr	r3, [r4, #16]
 80012fe:	b31b      	cbz	r3, 8001348 <__swbuf_r+0x68>
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	6922      	ldr	r2, [r4, #16]
 8001304:	1a98      	subs	r0, r3, r2
 8001306:	6963      	ldr	r3, [r4, #20]
 8001308:	b2f6      	uxtb	r6, r6
 800130a:	4283      	cmp	r3, r0
 800130c:	4637      	mov	r7, r6
 800130e:	dc04      	bgt.n	800131a <__swbuf_r+0x3a>
 8001310:	4621      	mov	r1, r4
 8001312:	4628      	mov	r0, r5
 8001314:	f7ff ffbc 	bl	8001290 <_fflush_r>
 8001318:	b9e0      	cbnz	r0, 8001354 <__swbuf_r+0x74>
 800131a:	68a3      	ldr	r3, [r4, #8]
 800131c:	3b01      	subs	r3, #1
 800131e:	60a3      	str	r3, [r4, #8]
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	6022      	str	r2, [r4, #0]
 8001326:	701e      	strb	r6, [r3, #0]
 8001328:	6962      	ldr	r2, [r4, #20]
 800132a:	1c43      	adds	r3, r0, #1
 800132c:	429a      	cmp	r2, r3
 800132e:	d004      	beq.n	800133a <__swbuf_r+0x5a>
 8001330:	89a3      	ldrh	r3, [r4, #12]
 8001332:	07db      	lsls	r3, r3, #31
 8001334:	d506      	bpl.n	8001344 <__swbuf_r+0x64>
 8001336:	2e0a      	cmp	r6, #10
 8001338:	d104      	bne.n	8001344 <__swbuf_r+0x64>
 800133a:	4621      	mov	r1, r4
 800133c:	4628      	mov	r0, r5
 800133e:	f7ff ffa7 	bl	8001290 <_fflush_r>
 8001342:	b938      	cbnz	r0, 8001354 <__swbuf_r+0x74>
 8001344:	4638      	mov	r0, r7
 8001346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001348:	4621      	mov	r1, r4
 800134a:	4628      	mov	r0, r5
 800134c:	f000 f806 	bl	800135c <__swsetup_r>
 8001350:	2800      	cmp	r0, #0
 8001352:	d0d5      	beq.n	8001300 <__swbuf_r+0x20>
 8001354:	f04f 37ff 	mov.w	r7, #4294967295
 8001358:	e7f4      	b.n	8001344 <__swbuf_r+0x64>
	...

0800135c <__swsetup_r>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <__swsetup_r+0xac>)
 8001360:	4605      	mov	r5, r0
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	460c      	mov	r4, r1
 8001366:	b118      	cbz	r0, 8001370 <__swsetup_r+0x14>
 8001368:	6a03      	ldr	r3, [r0, #32]
 800136a:	b90b      	cbnz	r3, 8001370 <__swsetup_r+0x14>
 800136c:	f7ff fa36 	bl	80007dc <__sinit>
 8001370:	89a3      	ldrh	r3, [r4, #12]
 8001372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001376:	0718      	lsls	r0, r3, #28
 8001378:	d422      	bmi.n	80013c0 <__swsetup_r+0x64>
 800137a:	06d9      	lsls	r1, r3, #27
 800137c:	d407      	bmi.n	800138e <__swsetup_r+0x32>
 800137e:	2309      	movs	r3, #9
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	e034      	b.n	80013f8 <__swsetup_r+0x9c>
 800138e:	0758      	lsls	r0, r3, #29
 8001390:	d512      	bpl.n	80013b8 <__swsetup_r+0x5c>
 8001392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001394:	b141      	cbz	r1, 80013a8 <__swsetup_r+0x4c>
 8001396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800139a:	4299      	cmp	r1, r3
 800139c:	d002      	beq.n	80013a4 <__swsetup_r+0x48>
 800139e:	4628      	mov	r0, r5
 80013a0:	f7ff fb24 	bl	80009ec <_free_r>
 80013a4:	2300      	movs	r3, #0
 80013a6:	6363      	str	r3, [r4, #52]	; 0x34
 80013a8:	89a3      	ldrh	r3, [r4, #12]
 80013aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013ae:	81a3      	strh	r3, [r4, #12]
 80013b0:	2300      	movs	r3, #0
 80013b2:	6063      	str	r3, [r4, #4]
 80013b4:	6923      	ldr	r3, [r4, #16]
 80013b6:	6023      	str	r3, [r4, #0]
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	6923      	ldr	r3, [r4, #16]
 80013c2:	b94b      	cbnz	r3, 80013d8 <__swsetup_r+0x7c>
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013ce:	d003      	beq.n	80013d8 <__swsetup_r+0x7c>
 80013d0:	4621      	mov	r1, r4
 80013d2:	4628      	mov	r0, r5
 80013d4:	f000 f850 	bl	8001478 <__smakebuf_r>
 80013d8:	89a0      	ldrh	r0, [r4, #12]
 80013da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013de:	f010 0301 	ands.w	r3, r0, #1
 80013e2:	d00a      	beq.n	80013fa <__swsetup_r+0x9e>
 80013e4:	2300      	movs	r3, #0
 80013e6:	60a3      	str	r3, [r4, #8]
 80013e8:	6963      	ldr	r3, [r4, #20]
 80013ea:	425b      	negs	r3, r3
 80013ec:	61a3      	str	r3, [r4, #24]
 80013ee:	6923      	ldr	r3, [r4, #16]
 80013f0:	b943      	cbnz	r3, 8001404 <__swsetup_r+0xa8>
 80013f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80013f6:	d1c4      	bne.n	8001382 <__swsetup_r+0x26>
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
 80013fa:	0781      	lsls	r1, r0, #30
 80013fc:	bf58      	it	pl
 80013fe:	6963      	ldrpl	r3, [r4, #20]
 8001400:	60a3      	str	r3, [r4, #8]
 8001402:	e7f4      	b.n	80013ee <__swsetup_r+0x92>
 8001404:	2000      	movs	r0, #0
 8001406:	e7f7      	b.n	80013f8 <__swsetup_r+0x9c>
 8001408:	2000005c 	.word	0x2000005c

0800140c <_sbrk_r>:
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4d06      	ldr	r5, [pc, #24]	; (8001428 <_sbrk_r+0x1c>)
 8001410:	2300      	movs	r3, #0
 8001412:	4604      	mov	r4, r0
 8001414:	4608      	mov	r0, r1
 8001416:	602b      	str	r3, [r5, #0]
 8001418:	f7ff f81a 	bl	8000450 <_sbrk>
 800141c:	1c43      	adds	r3, r0, #1
 800141e:	d102      	bne.n	8001426 <_sbrk_r+0x1a>
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	b103      	cbz	r3, 8001426 <_sbrk_r+0x1a>
 8001424:	6023      	str	r3, [r4, #0]
 8001426:	bd38      	pop	{r3, r4, r5, pc}
 8001428:	200001c0 	.word	0x200001c0

0800142c <__swhatbuf_r>:
 800142c:	b570      	push	{r4, r5, r6, lr}
 800142e:	460c      	mov	r4, r1
 8001430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001434:	2900      	cmp	r1, #0
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	4615      	mov	r5, r2
 800143a:	461e      	mov	r6, r3
 800143c:	da0d      	bge.n	800145a <__swhatbuf_r+0x2e>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	bf0c      	ite	eq
 800144a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800144e:	2340      	movne	r3, #64	; 0x40
 8001450:	2000      	movs	r0, #0
 8001452:	6031      	str	r1, [r6, #0]
 8001454:	602b      	str	r3, [r5, #0]
 8001456:	b016      	add	sp, #88	; 0x58
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	466a      	mov	r2, sp
 800145c:	f000 f848 	bl	80014f0 <_fstat_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	dbec      	blt.n	800143e <__swhatbuf_r+0x12>
 8001464:	9901      	ldr	r1, [sp, #4]
 8001466:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800146a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800146e:	4259      	negs	r1, r3
 8001470:	4159      	adcs	r1, r3
 8001472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001476:	e7eb      	b.n	8001450 <__swhatbuf_r+0x24>

08001478 <__smakebuf_r>:
 8001478:	898b      	ldrh	r3, [r1, #12]
 800147a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800147c:	079d      	lsls	r5, r3, #30
 800147e:	4606      	mov	r6, r0
 8001480:	460c      	mov	r4, r1
 8001482:	d507      	bpl.n	8001494 <__smakebuf_r+0x1c>
 8001484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001488:	6023      	str	r3, [r4, #0]
 800148a:	6123      	str	r3, [r4, #16]
 800148c:	2301      	movs	r3, #1
 800148e:	6163      	str	r3, [r4, #20]
 8001490:	b002      	add	sp, #8
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	ab01      	add	r3, sp, #4
 8001496:	466a      	mov	r2, sp
 8001498:	f7ff ffc8 	bl	800142c <__swhatbuf_r>
 800149c:	9900      	ldr	r1, [sp, #0]
 800149e:	4605      	mov	r5, r0
 80014a0:	4630      	mov	r0, r6
 80014a2:	f7ff fb0f 	bl	8000ac4 <_malloc_r>
 80014a6:	b948      	cbnz	r0, 80014bc <__smakebuf_r+0x44>
 80014a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ac:	059a      	lsls	r2, r3, #22
 80014ae:	d4ef      	bmi.n	8001490 <__smakebuf_r+0x18>
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	e7e3      	b.n	8001484 <__smakebuf_r+0xc>
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	6020      	str	r0, [r4, #0]
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	81a3      	strh	r3, [r4, #12]
 80014c6:	9b00      	ldr	r3, [sp, #0]
 80014c8:	6163      	str	r3, [r4, #20]
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	6120      	str	r0, [r4, #16]
 80014ce:	b15b      	cbz	r3, 80014e8 <__smakebuf_r+0x70>
 80014d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014d4:	4630      	mov	r0, r6
 80014d6:	f000 f81d 	bl	8001514 <_isatty_r>
 80014da:	b128      	cbz	r0, 80014e8 <__smakebuf_r+0x70>
 80014dc:	89a3      	ldrh	r3, [r4, #12]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	81a3      	strh	r3, [r4, #12]
 80014e8:	89a3      	ldrh	r3, [r4, #12]
 80014ea:	431d      	orrs	r5, r3
 80014ec:	81a5      	strh	r5, [r4, #12]
 80014ee:	e7cf      	b.n	8001490 <__smakebuf_r+0x18>

080014f0 <_fstat_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4d07      	ldr	r5, [pc, #28]	; (8001510 <_fstat_r+0x20>)
 80014f4:	2300      	movs	r3, #0
 80014f6:	4604      	mov	r4, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	602b      	str	r3, [r5, #0]
 80014fe:	f7fe ff7e 	bl	80003fe <_fstat>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d102      	bne.n	800150c <_fstat_r+0x1c>
 8001506:	682b      	ldr	r3, [r5, #0]
 8001508:	b103      	cbz	r3, 800150c <_fstat_r+0x1c>
 800150a:	6023      	str	r3, [r4, #0]
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	200001c0 	.word	0x200001c0

08001514 <_isatty_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d06      	ldr	r5, [pc, #24]	; (8001530 <_isatty_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	602b      	str	r3, [r5, #0]
 8001520:	f7fe ff7d 	bl	800041e <_isatty>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_isatty_r+0x1a>
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	b103      	cbz	r3, 800152e <_isatty_r+0x1a>
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	200001c0 	.word	0x200001c0

08001534 <_init>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	bf00      	nop
 8001538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153a:	bc08      	pop	{r3}
 800153c:	469e      	mov	lr, r3
 800153e:	4770      	bx	lr

08001540 <_fini>:
 8001540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001542:	bf00      	nop
 8001544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001546:	bc08      	pop	{r3}
 8001548:	469e      	mov	lr, r3
 800154a:	4770      	bx	lr
